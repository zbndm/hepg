
export class WebAppComponent {
    props;
    config;
    constructor(props, config) {
        this.props = Object.assign({}, props);
        this.config = Object.assign({}, config);
    }
    clone() {
        const { constructor } = Object.getPrototypeOf(this);
        return new constructor(this.props, this.config);
    }
    setProp(key, value) {
        this.props[key] = value;
        return this;
    }
    setLanguage(value) {
        return this.setProp("language", value);
    }
    setCallback(value) {
        return this.setProp("callback", value);
    }
    button(text) {
        return {
            text,
            web_app: {
                url: this.build(),
            },
        };
    }
    inlineButton(text) {
        if (typeof this.props.callback !== "string") {
            throw new Error("Callback property must be set for inline buttons");
        }
        return {
            text,
            web_app: {
                url: this.build(),
            },
        };
    }
    build() {
        const params = new URLSearchParams();
        for (const [key, value] of Object.entries(this.props)) {
            params.set(key, value.toString());
        }
        return `${this.config.baseUrl}/${this.config.path}?${params}`;
    }
}
